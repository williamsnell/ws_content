<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on willsnell</title>
    <link>http://localhost:1313/drafts/</link>
    <description>Recent content in Drafts on willsnell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://localhost:1313/drafts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/drafts/hyperspace/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/drafts/hyperspace/testing/</guid>
      <description>&lt;!DOCTYPE html&gt; + - vec_len - vec_len + </description>
      <content>&lt;!DOCTYPE html&gt;
&lt;head&gt;
&lt;script src=&#34;plotly-2.32.0.min.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&#34;myDiv&#34;&gt;&lt;/div&gt;
&lt;button onclick=&#34;vector_position = Math.min(VEC_LEN, vector_position + 1); redraw_background();&#34;&gt; + &lt;/button&gt;
  &lt;span id=&#34;vector_display&#34;&gt;&lt;/span&gt;
&lt;button onclick=&#34;vector_position = Math.max(0, vector_position - 1); redraw_background();&#34;&gt; - &lt;/button&gt;
&lt;button onclick=&#34;vec_pos = Math.max(0, vec_pos - 1); calc_vecs(); redraw_background();&#34;&gt; vec_len - &lt;/button&gt;
  &lt;span id=&#34;vec_len&#34;&gt;&lt;/span&gt;
&lt;button onclick=&#34;vec_pos = Math.min(vec_pos + 1, VEC_LENGTHS.length - 1); calc_vecs(); redraw_background();&#34;&gt; vec_len + &lt;/button&gt;

  &lt;div id=&#34;hyperspace&#34; style=&#34;flexbox&#34;&gt;
    &lt;div id=&#34;circular&#34;&gt;&lt;/div&gt;
    &lt;div id=&#34;spherical&#34;&gt;&lt;/div&gt;
  &lt;/div&gt;

&lt;div class=&#34;slidecontainer&#34;&gt;
  &lt;input type=&#34;range&#34; min=&#34;0.&#34; max=&#34;1.&#34; value=&#34;0.5&#34; class=&#34;slider&#34; id=&#34;myRange&#34;
    oninput=&#34;frac = this.value; draw_point();&#34;&gt;
&lt;/div&gt;

&lt;script&gt;

const NUM_VECS = 10_000;

const VEC_LENGTHS = [1, 2, 3, 4, 5, 6, 10, 20, 50, 100, 1000];
let vec_pos = 2;
let VEC_LEN = VEC_LENGTHS[vec_pos];


// Hopefully all this configuration stuff can be
// pulled in from CSS from the site...
const point_color = &#39;grey&#39;;
const DEFAULT_MARKER_SIZE = 2.0;

// User-selectable elements
let vector_position = 0;

function gaussianRandom(mean=0, stdev=1) {
  const u = 1 - Math.random();
  const v = Math.random();
  const z = Math.sqrt( -2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  return z * stdev + mean;
}

function uniformRandom(min=-1, max=1) {
  return Math.random() * (max - min) + min;
}

function vec_to_spherical_xyz(vec, elem0=0, elem1=1, elem2=2) {
  // Consider only calculating this once, when generating the
  // vectors.
  const two_norm = Math.sqrt(vec.reduce((acc, x) =&gt; (acc + x**2), 0));
  if (vec.length == 0) {
    return [0, 0, 0];
  }
  if (vec.length == 1) {
    return [two_norm, 0, 0];
  }
  if (vec.length == 2 | elem2 == null) {
    let angle_1 = Math.atan2(vec[elem1], vec[elem0]);
    return [two_norm * Math.cos(angle_1), two_norm * Math.sin(angle_1), 0];
  }

  let angle_1 = Math.atan2(vec[elem1], vec[elem0]);
  let angle_2 = Math.atan2(vec[elem2], Math.sqrt(vec[elem0]**2 + vec[elem1]**2));

  return [
    two_norm * Math.cos(angle_1) * Math.cos(angle_2), 
    two_norm * Math.sin(angle_1) * Math.cos(angle_2), 
    two_norm * Math.sin(angle_2)
  ];
}

function vec_norm(vec) {
  let acc = 0;
  for (var i = 0; i &lt; vec.length; i++) {
    acc += vec[i]**2;
  }
  return Math.sqrt(acc);
}

function vec_to_spherical_maybe_faster(vec, elem0=0, elem1=1, elem2=2) {
  if (vec.length == 1) {
    return [vec[elem0], 0, 0];
  }
  const norm = vec_norm(vec);

  if (vec.length == 2 | elem2 == null) {
    // This feels like cheating, but really 
    // we don&#39;t need to do anything up until 
    // 4 dimensions
    return [vec[elem0], vec[elem1], 0];
  }

  const dir_norm = vec_norm([vec[elem0], vec[elem1], vec[elem2]]);
  const mag = norm / dir_norm;
  return [vec[elem0] * mag, vec[elem1] * mag, vec[elem2] * mag];
}

function vecs_to_spherical(vecs, elem0=0, elem1=1, elem2=2) {
  let x = [];
  let y = [];
  let z = [];

  vecs.map((vec) =&gt; {
    let [vec_x, vec_y, vec_z] = vec_to_spherical_xyz(vec, elem0, elem1, elem2);
    x.push(vec_x);
    y.push(vec_y);
    z.push(vec_z);
  });

  return [x, y, z];
}

function newVec(initializer) {
  return Array.from({length: VEC_LEN}, (x, i) =&gt; initializer());
}
  
let vecs = [];

function calc_vecs() {
  VEC_LEN = VEC_LENGTHS[vec_pos];
  vecs = [];
  for (let i = 0; i &lt; NUM_VECS; i++) {
    vecs.push(newVec(gaussianRandom));
  }
}

function slice_arrays(index, array) {
  let x = [];
  let y = [];
  let z = [];
  
  for (var i = 0; i &lt; array.length; i++) {
    x.push(array[i][index]);
    y.push(array[i][index + 1]);
    z.push(array[i][index + 2]);
  }
  return [x, y, z];
}


let layout = {
  width: &#34;30%&#34;,
  paper_bgcolor: &#39;rgba(0,0,0,0)&#39;,
  plot_bgcolor: &#39;rgba(0,0,0,0)&#39;,
  hovermode: false,
  
  xaxis: {
    zeroline: false,
    tickmode: &#34;array&#34;,
    tickvals: [-3, 0, 3], 
  },
  yaxis: {
    zeroline: false,
    tickmode: &#34;array&#34;,
    tickvals: [-3, 0, 3], 
  },
  scene: {
    aspectmode: &#39;data&#39;,
    xaxis: {
      zeroline: false,
      tickmode: &#34;array&#34;,
      tickvals: [-3, 0, 3], 
    },
    yaxis: {
      zeroline: false,
      scaleanchor: &#34;x&#34;,
      scaleratio: 1,
      tickmode: &#34;array&#34;,
      tickvals: [-3, 0, 3], 
    },
    zaxis: {
      zeroline: false,
      tickmode: &#34;array&#34;,
      tickvals: [-3, 0, 3], 
    }
  }
};

calc_vecs();

let [x, y, z] = slice_arrays(vector_position, vecs);
/* let [hero_x, hero_y, hero_z] = slice_arrays(vector_position, hero_vec); */

const data = [
  {
    type: &#39;scatter3d&#39;,
    mode: &#39;markers&#39;,
    x: x,
    y: y,
    z: z,
    opacity: 1,
    marker: {
      size: vecs.map((x) =&gt; DEFAULT_MARKER_SIZE),
      color: vecs.map((x) =&gt; point_color),
      line: {
        width: 0,
      }
    }
  },
  // {
  //   type: &#39;scatter3d&#39;,
  //   mode: &#39;markers&#39;,
  //   x: hero_x,
  //   y: hero_y,
  //   z: hero_z,
  //   marker: {
  //     size: 2,
  //     color: &#39;red&#39;,
  //   }
  //}
]
data[0].marker.color[0] = &#39;red&#39;;
data[0].marker.color[1] = &#39;red&#39;;
data[0].marker.size[0] = 6;
data[0].marker.size[1] = 6;

const config = {
  displayModeBar: false,
  dragMode: false,
  scrollZoom: true,
};

let plot = document.getElementById(&#34;myDiv&#34;);
let spherical = document.getElementById(&#34;spherical&#34;);
let circular = document.getElementById(&#34;circular&#34;);
let vec_display = document.getElementById(&#34;vector_display&#34;);

function redraw_background() {
  let [x, y, z] = slice_arrays(vector_position, vecs);
  data[0].x = x;
  data[0].y = y;
  data[0].z = z;
  data[0].marker.color[0] = &#39;red&#39;;
  data[0].marker.color[1] = &#39;red&#39;;
  data[0].marker.size[0] = 6;
  data[0].marker.size[1] = 6;

  Plotly.react(plot, data, layout, config);

  let [s_x, s_y, s_z] = vecs_to_spherical(vecs, vector_position, vector_position + 1, vector_position + 2);
  spherical_data[0].x = s_x;
  spherical_data[0].y = s_y;
  spherical_data[0].z = s_z;
  spherical_data[0].marker.color[0] = &#39;red&#39;;
  spherical_data[0].marker.color[1] = &#39;red&#39;;
  spherical_data[0].marker.size[0] = 6;
  spherical_data[0].marker.size[1] = 6;

  layout.scene.xaxis.tickmode = &#34;array&#34;;
  layout.scene.yaxis.tickmode = &#34;array&#34;;
  layout.scene.zaxis.tickmode = &#34;array&#34;;
  let sigma = 1.0;
  let bound = Math.ceil(Math.sqrt(vecs[0].length) * sigma);
  layout.scene.xaxis.tickvals = [-bound, bound];
  layout.scene.yaxis.tickvals = [-bound, bound];
  layout.scene.zaxis.tickvals = [-bound, bound];
  layout.xaxis.tickvals = [-bound, bound];
  layout.yaxis.tickvals = [-bound, bound];


  Plotly.react(spherical, spherical_data, layout, config);


  let [c_x, c_y, c_z] = vecs_to_spherical(vecs, vector_position, vector_position + 1, null);
  circular_data[0].x = c_x;
  circular_data[0].y = c_y;
  circular_data[0].marker.color[0] = &#39;red&#39;;
  circular_data[0].marker.color[1] = &#39;red&#39;;
  circular_data[0].marker.size[0] = 6;
  circular_data[0].marker.size[1] = 6;
  circular_data[0].test = &#34;true&#34;;

  Plotly.react(circular, circular_data, layout, config);

  // show interpolation
  let lerp_path = draw_interp(vecs, lerp);
  let [p_x, p_y, p_z] = slice_arrays(vector_position, lerp_path);
  let new_data = {
    type: &#39;scatter3d&#39;,
    mode: &#39;lines&#39;,
    x: p_x,
    y: p_y,
    z: p_z,
  }

  Plotly.addTraces(plot, new_data);
  Plotly.deleteTraces(plot, 1);

  let [ns_x, ns_y, ns_z] = vecs_to_spherical(lerp_path, vector_position, vector_position + 1, vector_position + 2);
  let new_sphere = {
    type: &#39;scatter3d&#39;,
    mode: &#39;lines&#39;,
    x: ns_x,
    y: ns_y,
    z: ns_z,
  }

  Plotly.deleteTraces(spherical, 1);
  Plotly.addTraces(spherical, new_sphere);

  let [nc_x, nc_y, nc_z] = vecs_to_spherical(lerp_path, vector_position, vector_position + 1, null);
  let new_circ = {
    type: &#39;scattergl&#39;,
    mode: &#39;lines&#39;,
    x: nc_x,
    y: nc_y,
  }

  Plotly.deleteTraces(circular, 1);
  Plotly.addTraces(circular, new_circ);

  showVecText();
  draw_point();
}

function showVecText() {
  let vec_string = &#34;[&#34;;
  if (vector_position &gt; 0) {
    vec_string += &#34;..., &#34;; 
  }

  // TODO bounds check on vector_position
  const NUM_DISPLAYED = 3;
  for (var pos = vector_position; pos &lt; Math.min(VEC_LEN, vector_position + NUM_DISPLAYED); pos++) {
    vec_string += `${vecs[0][pos].toFixed(2)}, `;
  }

  if (vector_position + NUM_DISPLAYED &lt; VEC_LEN) {
    vec_string += &#34;...&#34;;
  }

  vec_string += &#34;]&#34;;
  
  vec_display.textContent = vec_string;

  let vec_len = document.getElementById(&#34;vec_len&#34;);
  vec_len.textContent = VEC_LEN;
}

Plotly.newPlot(plot, data, layout, config);

// 3-sphere
let [s_x, s_y, s_z] = vecs_to_spherical(vecs);


const spherical_data = [
  {
    type: &#39;scatter3d&#39;,
    mode: &#39;markers&#39;,
    x: s_x,
    y: s_y,
    z: s_z,
    opacity: 1,
    marker: {
      size: vecs.map((x) =&gt; DEFAULT_MARKER_SIZE),
      color: vecs.map((x) =&gt; point_color),
      line: {
        width: 0,
      } 
    }
  },
]
spherical_data[0].marker.color[0] = &#39;red&#39;;
spherical_data[0].marker.color[1] = &#39;red&#39;;
spherical_data[0].marker.size[0] = 6;
spherical_data[0].marker.size[1] = 6;

Plotly.newPlot(spherical, spherical_data, layout, config);

// 2-sphere
let [c_x, c_y, c_z] = vecs_to_spherical(vecs, vector_position, vector_position + 1, null);

const circular_data = [
  {
    type: &#39;scattergl&#39;,
    mode: &#39;markers&#39;,
    x: c_x,
    y: c_y,
    opacity: 1,
    marker: {
      size: vecs.map((x) =&gt; DEFAULT_MARKER_SIZE),
      color: vecs.map((x) =&gt; point_color),
      line: {
        width: 0,
      } 
    }
  },
]
circular_data[0].marker.color[0] = &#39;red&#39;;
circular_data[0].marker.color[1] = &#39;red&#39;;
circular_data[0].marker.size[0] = 6;
circular_data[0].marker.size[1] = 6;

Plotly.newPlot(circular, circular_data, layout, config);
// Plotly.restyle(plot, &#39;marker.size&#39;, [[&#39;red&#39;]]);
showVecText();

// lerp

function lerp(fraction, start, stop) {
  let out = [];
  for (var i = 0; i &lt; start.length; i++) {
    out[i] = start[i] + fraction * (stop[i] - start[i]);
  }
  return out;
}

function _v(func, array) {
  // Apply a function along a vector.
  return array.map((x) =&gt; func(x));
}

function clamp(val, min, max) {
  // Mirror&#39;s numpy&#39;s &#39;clip&#39; function
  return Math.max(min, Math.min(val, max));
}

function mult(array, num) {
  // elemwise multiplication
  return array.map((x) =&gt; x * num);
}

function dot(arr1, arr2) {
  // Implicitly assumes arr1 and arr2 
  // have the same length.
  acc = 0;
  for (var i = 0; i &lt; arr1.length; i++) {
    acc += arr1[i] * arr2[i]; 
  }
  return acc;
}

function slerp(fraction, start, stop) {
  const norm_start = mult(start, 1 / vec_norm(start));
  const norm_stop = mult(stop, 1 / vec_norm(stop));

  const omega = Math.acos(clamp(dot(norm_start, norm_stop), -1, 1));
  const so = Math.sin(omega);

  let out = new Array(start.length);

  if (so == 0) {
    for (let i = 0; i &lt; start.length; i++) {
      out[i] = (1.0 - fraction) * start[i] + fraction * stop[i];
    }
  }
  else {
    let s_omega_minus = Math.sin((1.0 - fraction) * omega) / so;
    let s_omega_plus = Math.sin(fraction * omega) / so;
    for (let i = 0; i &lt; start.length; i++) {
      out[i] = s_omega_minus * start[i] + s_omega_plus * stop[i];
    }
  }
  return out;
}

// Returns an array of vectors, i.e. NOT transformed into x, y, z
function draw_interp(vecs, interpolator, num_steps=100) {
  let tweens = Array.from({ length: num_steps}, (v, i) =&gt; i / (num_steps - 1));
  
  return tweens.map((fraction) =&gt; interpolator(fraction, vecs[0], vecs[1]));
     
}

// show interpolation
let lerp_path = draw_interp(vecs, lerp);
let [p_x, p_y, p_z] = slice_arrays(vector_position, lerp_path);
let new_data = {
  type: &#39;scatter3d&#39;,
  mode: &#39;lines&#39;,
  x: p_x,
  y: p_y,
  z: p_z,
}

Plotly.addTraces(plot, new_data);

let [ns_x, ns_y, ns_z] = vecs_to_spherical(lerp_path, vector_position, vector_position + 1, vector_position + 2);
let new_sphere = {
  type: &#39;scatter3d&#39;,
  mode: &#39;lines&#39;,
  x: ns_x,
  y: ns_y,
  z: ns_z,
}

Plotly.addTraces(spherical, new_sphere);

let [nc_x, nc_y, nc_z] = vecs_to_spherical(lerp_path, vector_position, vector_position + 1, null);
let new_circ = {
  type: &#39;scattergl&#39;,
  mode: &#39;lines&#39;,
  x: nc_x,
  y: nc_y,
}

Plotly.addTraces(circular, new_circ);

let frac = 0.5;

function draw_point(del_old=true) {
  let midpoint = slerp(frac, vecs[0], vecs[1]);
  midpoint_circ = vecs_to_spherical([midpoint], vector_position, vector_position + 1, null);
  midpoint_spher = vecs_to_spherical([midpoint], vector_position, vector_position + 1, vector_position + 2);
  if (del_old) {
    Plotly.deleteTraces(spherical, 1);
    Plotly.deleteTraces(circular, 1);
    Plotly.deleteTraces(plot, 1);
  }
  let spher_point = {
    type: &#39;scatter3d&#39;,
    mode: &#39;marker&#39;,
    x: midpoint_spher[0],
    y: midpoint_spher[1],
    z: midpoint_spher[2],
  }
  let circ_point = {
    type: &#39;scattergl&#39;,
    mode: &#39;marker&#39;,
    x: midpoint_circ[0],
    y: midpoint_circ[1],
  } 
  let point = {
    type: &#39;scatter3d&#39;,
    mode: &#39;marker&#39;,
    x: midpoint[0],
    y: midpoint[1],
    z: midpoint[2],
  }

  Plotly.addTraces(spherical, spher_point);
  Plotly.addTraces(circular, circ_point);
  Plotly.addTraces(plot, point);
}

draw_point(false);


&lt;/script&gt;
&lt;/body&gt;
</content>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/drafts/hyperspace/testing2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/drafts/hyperspace/testing2/</guid>
      <description>&lt;!DOCTYPE html&gt; </description>
      <content>&lt;!DOCTYPE html&gt;
&lt;head&gt;
&lt;script type=&#34;text/javascript&#34; id=&#34;MathJax-script&#34; async
  src=&#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&#34;&gt;
&lt;/script&gt;
&lt;script src=&#34;plotly-2.32.0.min.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div id=&#39;vector&#39;&gt;&lt;/div&gt;

&lt;script&gt;
const VEC_ELEMS_DISPLAYED = 8;
const AVAILABLE_DIMENSIONS = [1, 2, 3, 4, 5, 6, 10, 20, 50, 100, 1000];


function latexize_vector(vector, element_id, slice_offset, dimensions, num_selected) {
  if (dimensions &gt; vector.length) throw(&#34;Dimensions &gt; vector length&#34;);
  let latex_str = `
    \\[
    \\mathbf{
    \\begin{align}
\\vec{v_{${dimensions}}} = \\begin{bmatrix}`;

  const start = Math.max(0, Math.min(slice_offset, dimensions - VEC_ELEMS_DISPLAYED));
  const desired_stop = Math.min(dimensions, slice_offset + VEC_ELEMS_DISPLAYED);
    
  // Adding dots increases the size of the vector, so we need
  // this check to stop the vector increasing and decreasing
  // in length as we scroll through.
  const stop = (start &gt; 0 &amp;&amp; desired_stop &lt; dimensions) ? desired_stop - 1 : desired_stop;

  if (start &gt; 0) latex_str += `\\vdots \\\\`;
  for (let i = start; i &lt; stop; i++) {
    if ((i - slice_offset) &gt;= 0 &amp;&amp; (i - slice_offset) &lt; num_selected) {
      latex_str += `\\mathbf{${vector[i].toFixed(2)}} \\\\`
    } else {
      latex_str += `${vector[i].toFixed(2)} \\\\`
    }
  }
  if (stop &lt; dimensions) latex_str += `\\vdots \\\\`;

  latex_str += `\\end{bmatrix}
              \\end{align}
            }
            \\]`;
  document.getElementById(element_id).innerHTML = latex_str;
}

function get_vector_widget(vector, id, start_dims=0, start_offset=0, num_selected=2) {
  let current_dims = start_dims;
  let current_offset = start_offset;

  const container = document.getElementById(id);
  const dim_plus = container.appendChild(document.createElement(&#34;button&#34;));
  const dim_minus = container.appendChild(document.createElement(&#34;button&#34;));
  const slice_plus = container.appendChild(document.createElement(&#34;button&#34;));
  const slice_minus = container.appendChild(document.createElement(&#34;button&#34;));
  
  const vec_div = container.appendChild(document.createElement(&#34;div&#34;));
  vec_div.id = id + &#34;_vec_div&#34;;

  async function redraw_vec() {
    latexize_vector(vector, vec_div.id, current_offset, AVAILABLE_DIMENSIONS[current_dims], num_selected);
    await MathJax.typesetPromise();
  }

  redraw_vec();


  // create +dimensions button
  dim_plus.textContent = &#34;dim+&#34;;
  dim_plus.onclick = () =&gt; {
    if (AVAILABLE_DIMENSIONS[current_dims + 1] &lt;= vector.length) {
      current_dims = current_dims + 1
      current_offset = Math.min(current_offset, AVAILABLE_DIMENSIONS[current_dims] - num_selected);
      redraw_vec();
    };
  };
  // create -dimensions button
  dim_minus.textContent = &#34;dim-&#34;;
  dim_minus.onclick = () =&gt; {
    current_dims = Math.max(0, current_dims - 1);
    current_offset = Math.min(current_offset, AVAILABLE_DIMENSIONS[current_dims] - num_selected);
    redraw_vec();
  }; 
  // create +slice button
  slice_plus.textContent = &#34;slice+&#34;;
  slice_plus.onclick = () =&gt; {
    current_offset = Math.min(AVAILABLE_DIMENSIONS[current_dims] - num_selected, current_offset + 1); 
    redraw_vec();
  };

  // create -slice button
  slice_minus.textContent = &#34;slice-&#34;;
  slice_minus.onclick = () =&gt; {
    current_offset = Math.max(0, current_offset - 1); 
    redraw_vec();
  };


}
  // hook buttons up to relevant plot callbacks

get_vector_widget(Array.from({length: 1000}, (v, i) =&gt; i), &#39;vector&#39;, 0, 0, 1);

&lt;/script&gt;
</content>
    </item>
    
  </channel>
</rss>
